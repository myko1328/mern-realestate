{
  "openapi": "3.0.3",
  "info": {
    "title": "Mern Estate API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Listings",
      "description": "Discover all listings api"
    },
    {
      "name": "Health",
      "description": "Health check endpoint for Mern Estate API"
    },
    {
      "name": "Auth",
      "description": "Authentication Endpoints"
    },
    {
      "name": "User",
      "description": "Authentication Endpoints"
    }
  ],
  "paths": {
    "/api/v1/auth/signup": {
      "post": {
        "summary": "User Signup",
        "description": "Registers a new user with the provided username, email, and password.",
        "operationId": "signup",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "email",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The user's username."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email address."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "The user's password."
                  }
                },
                "example": {
                  "username": "johndoe",
                  "email": "johndoe@example.com",
                  "password": "password123"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "success": true,
                    "message": "User created successfully!"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request or data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Error during the process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "summary": "User Sign In",
        "description": "Authenticates a user and returns a token set in an HTTP-only cookie.",
        "operationId": "signin",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password."
                  }
                },
                "example": {
                  "email": "user@example.com",
                  "password": "password123"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful. Returns user details and sets an HTTP-only cookie.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "The user's ID."
                    },
                    "avatar": {
                      "type": "string",
                      "description": "URL to the user's avatar."
                    },
                    "username": {
                      "type": "string",
                      "description": "The user's username."
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "The user's email address."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when the user was created."
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp of when the user information was last updated."
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "Sets the access token in an HTTP-only cookie.",
                "schema": {
                  "type": "string",
                  "example": "access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZDEzZGYxMjE5ZTRjNDM1ZGY4ZTc0ZiIsImlhdCI6MTYxODIxMjM0MH0.M11_vRI8ebbR-0K1sEJimzJJayWEp-r5yk4CsS1aC2A; Path=/; HttpOnly"
                }
              }
            }
          },
          "404": {
            "description": "Wrong credentials provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/google": {
      "post": {
        "summary": "Google Sign In",
        "description": "Signs in a user using Google authentication. If the user does not exist, a new account is created.",
        "operationId": "googleSignIn",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "name",
                  "photo"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email address."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "The user's password."
                  },
                  "name": {
                    "type": "string",
                    "description": "The user's full name."
                  },
                  "photo": {
                    "type": "string",
                    "description": "URL to the user's photo."
                  }
                },
                "example": {
                  "email": "user@example.com",
                  "password": "password123",
                  "name": "John Doe",
                  "photo": "https://example.com/photo.jpg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in successful or new user created. Returns user data and sets an HTTP-only cookie.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "avatar": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "example": {
                  "_id": "66152a688d4bd8556e8148ee",
                  "username": "johndoe2023",
                  "email": "user@example.com",
                  "avatar": "https://example.com/photo.jpg",
                  "createdAt": "2024-04-09T11:45:44.584Z",
                  "updatedAt": "2024-04-09T11:45:44.584Z"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "Sets the access token in an HTTP-only cookie.",
                "schema": {
                  "type": "string",
                  "example": "access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ZDEzZGYxMjE5ZTRjNDM1ZGY4ZTc0ZiIsImlhdCI6MTYxODIxMjM0MH0.M11_vRI8ebbR-0K1sEJimzJJayWEp-r5yk4CsS1aC2A; Path=/; HttpOnly"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid request data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Error during the process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signout": {
      "post": {
        "summary": "User Sign Out",
        "description": "Logs out the current user by clearing the access token cookie.",
        "operationId": "signOut",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "User has been logged out successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "User has been logged out!"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "Clears the access token cookie.",
                "schema": {
                  "type": "string",
                  "example": "access_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Error during the process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Health check endpoint for Mern Estate API",
        "operationId": "healthCheck",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthStatus"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/listing/create": {
      "post": {
        "summary": "Create a new listing",
        "description": "Creates a new real estate listing. Requires authentication.",
        "operationId": "createListing",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "description",
                  "address",
                  "regularPrice",
                  "discountPrice",
                  "bathrooms",
                  "bedrooms",
                  "furnished",
                  "parking",
                  "type",
                  "offer",
                  "imageUrls",
                  "userRef"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "regularPrice": {
                    "type": "number"
                  },
                  "discountPrice": {
                    "type": "number"
                  },
                  "bathrooms": {
                    "type": "integer"
                  },
                  "bedrooms": {
                    "type": "integer"
                  },
                  "furnished": {
                    "type": "boolean"
                  },
                  "parking": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "string"
                  },
                  "offer": {
                    "type": "boolean"
                  },
                  "imageUrls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "userRef": {
                    "type": "string"
                  }
                },
                "example": {
                  "name": "test",
                  "description": "test",
                  "address": "test",
                  "regularPrice": 500,
                  "discountPrice": 500,
                  "bathrooms": 5,
                  "bedrooms": 5,
                  "furnished": true,
                  "parking": true,
                  "type": "rent",
                  "offer": true,
                  "imageUrls": [
                    "https://firebasestorage.googleapis.com/v0/b/mern-estate-cd7da.appspot.com/o/1708210646755Screenshot%202022-06-21%20145750.png?alt=media&token=580150ce-cd67-45a5-a01e-5893ba612c54"
                  ],
                  "userRef": "65d13df1219e4c435df8e74f"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Listing created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "address": {
                      "type": "string"
                    },
                    "regularPrice": {
                      "type": "number"
                    },
                    "discountPrice": {
                      "type": "number"
                    },
                    "bathrooms": {
                      "type": "integer"
                    },
                    "bedrooms": {
                      "type": "integer"
                    },
                    "furnished": {
                      "type": "boolean"
                    },
                    "parking": {
                      "type": "boolean"
                    },
                    "type": {
                      "type": "string"
                    },
                    "offer": {
                      "type": "boolean"
                    },
                    "imageUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "userRef": {
                      "type": "string"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "__v": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No token provided or token is invalid."
          },
          "403": {
            "description": "Forbidden - Token is valid but does not have permission to perform this action."
          }
        }
      }
    },
    "/api/v1/listing/delete/{id}": {
      "delete": {
        "summary": "Delete a listing",
        "description": "Deletes a specific listing. Requires authentication and user must be the owner of the listing.",
        "operationId": "deleteListing",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the listing to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Listing has been deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Listing has been deleted!"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No token provided, token is invalid, or user is not the owner of the listing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Listing not found - The ID provided does not match any listings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/listing/update/{id}": {
      "post": {
        "summary": "Update a listing",
        "description": "Updates the details of an existing listing. Requires authentication.",
        "operationId": "updateListing",
        "tags": [
          "Listings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the listing to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "regularPrice": {
                    "type": "number"
                  },
                  "discountPrice": {
                    "type": "number"
                  },
                  "bathrooms": {
                    "type": "integer"
                  },
                  "bedrooms": {
                    "type": "integer"
                  },
                  "furnished": {
                    "type": "boolean"
                  },
                  "parking": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "string"
                  },
                  "offer": {
                    "type": "boolean"
                  },
                  "imageUrls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "userRef": {
                    "type": "string"
                  }
                },
                "example": {
                  "name": "Updated Listing Name",
                  "description": "Updated description here.",
                  "address": "Updated Address",
                  "regularPrice": 500,
                  "discountPrice": 450,
                  "bathrooms": 2,
                  "bedrooms": 3,
                  "furnished": true,
                  "parking": true,
                  "type": "rent",
                  "offer": true,
                  "imageUrls": [
                    "https://example.com/image1.jpg"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The listing was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "address": {
                      "type": "string"
                    },
                    "regularPrice": {
                      "type": "number"
                    },
                    "discountPrice": {
                      "type": "number"
                    },
                    "bathrooms": {
                      "type": "integer"
                    },
                    "bedrooms": {
                      "type": "integer"
                    },
                    "furnished": {
                      "type": "boolean"
                    },
                    "parking": {
                      "type": "boolean"
                    },
                    "type": {
                      "type": "string"
                    },
                    "offer": {
                      "type": "boolean"
                    },
                    "imageUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "userRef": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "__v": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No token provided or token is invalid."
          },
          "403": {
            "description": "Forbidden - Token is valid but does not have permission to perform this action."
          },
          "404": {
            "description": "Listing not found - The ID provided does not match any listings."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/api/v1/listing/get/{id}": {
      "get": {
        "summary": "Get a single real estate listing by ID",
        "description": "Retrieves detailed information about a specific real estate listing.",
        "operationId": "getListing",
        "tags": [
          "Listings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the listing to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "A single real estate listing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "The listing ID."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the listing."
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the listing."
                    },
                    "address": {
                      "type": "string",
                      "description": "The address of the listing."
                    },
                    "regularPrice": {
                      "type": "number",
                      "description": "The regular price of the listing."
                    },
                    "discountPrice": {
                      "type": "number",
                      "description": "The discounted price of the listing, if any."
                    },
                    "bathrooms": {
                      "type": "integer",
                      "description": "The number of bathrooms in the listing."
                    },
                    "bedrooms": {
                      "type": "integer",
                      "description": "The number of bedrooms in the listing."
                    },
                    "furnished": {
                      "type": "boolean",
                      "description": "Whether the listing is furnished."
                    },
                    "parking": {
                      "type": "boolean",
                      "description": "Whether the listing includes parking."
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of listing, e.g., rent or sale."
                    },
                    "offer": {
                      "type": "boolean",
                      "description": "Whether the listing is on offer."
                    },
                    "imageUrls": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "URLs to images of the listing."
                    },
                    "userRef": {
                      "type": "string",
                      "description": "Reference ID of the user who posted the listing."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when the listing was created."
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when the listing was last updated."
                    },
                    "__v": {
                      "type": "integer",
                      "description": "Version number of the listing."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/listing/get": {
      "get": {
        "description": "Get all real estate listings",
        "operationId": "get",
        "tags": [
          "Listings"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of listings to return",
            "required": false
          },
          {
            "in": "query",
            "name": "startIndex",
            "schema": {
              "type": "integer"
            },
            "description": "Number of listings to skip for pagination",
            "required": false
          },
          {
            "in": "query",
            "name": "offer",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by offer type",
            "required": false
          },
          {
            "in": "query",
            "name": "furnished",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by furnished status",
            "required": false
          },
          {
            "in": "query",
            "name": "parking",
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by parking availability",
            "required": false
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Filter by listing type (sale, rent)",
            "required": false
          },
          {
            "in": "query",
            "name": "searchTerm",
            "schema": {
              "type": "string"
            },
            "description": "Search term for listing names",
            "required": false
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "description": "Sort field",
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string"
            },
            "description": "Sort order (asc, desc)",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The listing ID."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the listing."
                      },
                      "price": {
                        "type": "number",
                        "description": "The price of the listing."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/users/update/{id}": {
      "post": {
        "summary": "Update User Account",
        "description": "Updates the details of a specific user account. Requires authentication and users can only update their own account.",
        "operationId": "updateUser",
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the user account to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The user's new username."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's new email address."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "The user's new password."
                  },
                  "avatar": {
                    "type": "string",
                    "description": "URL to the user's new avatar image."
                  }
                },
                "example": {
                  "username": "newUsername",
                  "email": "newEmail@example.com",
                  "password": "newPassword123",
                  "avatar": "https://example.com/newAvatar.jpg"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User account updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "avatar": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "example": {
                    "_id": "60d0fe4f5311236168a109cb",
                    "username": "newUsername",
                    "email": "newEmail@example.com",
                    "avatar": "https://example.com/newAvatar.jpg",
                    "createdAt": "2021-06-21T12:00:00Z",
                    "updatedAt": "2021-06-22T15:00:00Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated, token is invalid, or user is not the owner of the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Error during the update process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/delete/{id}": {
      "delete": {
        "summary": "Delete User Account",
        "description": "Deletes a specific user account. Requires authentication and users can only delete their own account.",
        "operationId": "deleteUser",
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the user account to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "User account has been deleted successfully. The access token cookie is also cleared.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "User has been deleted!"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "Clears the access token cookie.",
                "schema": {
                  "type": "string",
                  "example": "access_token=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated, token is invalid, or user is not the owner of the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Error during the deletion process.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/listings/{id}": {
      "get": {
        "summary": "Get User Listings",
        "description": "Retrieves all listings created by a specific user. Requires authentication and user can only access their own listings.",
        "operationId": "getUserListings",
        "tags": [
          "Listings"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the user whose listings are to be retrieved."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved listings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "regularPrice": {
                        "type": "number"
                      },
                      "discountPrice": {
                        "type": "number"
                      },
                      "bathrooms": {
                        "type": "integer"
                      },
                      "bedrooms": {
                        "type": "integer"
                      },
                      "furnished": {
                        "type": "boolean"
                      },
                      "parking": {
                        "type": "boolean"
                      },
                      "type": {
                        "type": "string"
                      },
                      "offer": {
                        "type": "boolean"
                      },
                      "imageUrls": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "userRef": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "example": [
                    {
                      "_id": "60d0fe4f5311236168a109cb",
                      "name": "Cozy Cottage",
                      "description": "A cozy cottage in the city outskirts.",
                      "address": "123 Main St, Anytown",
                      "regularPrice": 250000,
                      "discountPrice": 245000,
                      "bathrooms": 2,
                      "bedrooms": 3,
                      "furnished": true,
                      "parking": true,
                      "type": "sale",
                      "offer": false,
                      "imageUrls": [
                        "https://example.com/image1.jpg"
                      ],
                      "userRef": "60d0fe4f5311236168a109ca",
                      "createdAt": "2021-06-21T12:00:00Z",
                      "updatedAt": "2021-06-22T15:00:00Z"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - User is not authenticated or does not have permission to view these listings."
          },
          "404": {
            "description": "Not Found - No listings found for the user."
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "summary": "Get User Details",
        "description": "Retrieves details of a specific user by their ID. Requires authentication.",
        "operationId": "getUser",
        "tags": [
          "User"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the user."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "avatar": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  },
                  "example": {
                    "_id": "60d0fe4f5311236168a109ca",
                    "username": "johndoe",
                    "email": "johndoe@example.com",
                    "avatar": "https://example.com/avatar.jpg",
                    "createdAt": "2021-06-21T12:00:00Z",
                    "updatedAt": "2021-06-22T15:00:00Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No token provided or token is invalid."
          },
          "404": {
            "description": "User not found - The ID provided does not match any users."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorModel": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message detailing what went wrong."
          }
        }
      },
      "HealthStatus": {
        "description": "Health check status",
        "type": "object",
        "required": [
          "status",
          "timestamp"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "OK"
            ]
          },
          "timestamp": {
            "type": "integer",
            "description": "Number of milliseconds since Epoch time",
            "example": 1688612539479
          }
        }
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "access_token"
      }
    },
    "responses": {
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "BadRequestError": {
        "description": "Bad Request Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      }
    }
  }
}